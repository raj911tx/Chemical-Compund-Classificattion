# -*- coding: utf-8 -*-
"""Chemical_Classify.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kPgeaZczLYApb9hAo6zsN1VLxMi-zfxb

import file from the drive using the following code
"""

from google.colab import files
uploaded = files.upload()

"""doing dataframe operations using pandas library and import dataset file"""

import pandas
df=pandas.read_csv('musk_csv.csv',index_col=0)
print(df)

"""Now we are checking if any data is missing"""

df.isnull().sum()

"""Now we are dropping the columns which are not required to analysis"""

df=df.drop(['molecule_name','conformation_name'],axis=1)
print(df)

"""Now selecting feature columns and label columns"""

df_labels=df['class']
df_features=df.drop(['class'],axis=1)

df_labels.head()

df_features.head()

"""Now doing normalization operation so that data is in same range of values"""

from sklearn import preprocessing
df_features=preprocessing.normalize(df_features)

"""Now we split the dataset into training and testing data to 80:20 ratio"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(df_features,
                                                 df_labels,
                                                 test_size=0.2)

X_train[0].shape

"""Now we crate the binary model using specific layers"""

from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from keras.layers import Dropout
from keras import regularizers
def create_model():
  model = Sequential()
  model.add(Dense(16, input_dim=166, kernel_initializer='normal', kernel_regularizer=regularizers.l2(0.001), activation='relu'))
  model.add(Dropout(0.25))
  model.add(Dense(8, kernel_initializer='normal', kernel_regularizer=regularizers.l2(0.001), activation='relu'))
  model.add(Dropout(0.25))
  model.add(Dense(1, activation='sigmoid'))
    
  adam = Adam(lr=0.001)
  model.compile(loss='binary_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
  return model

model = create_model()

print(model.summary())

"""now we train the model for 50 epochs and batch size of 10"""

history=model.fit(X_train, y_train, validation_data=(X_test, y_test),epochs=50, batch_size=10)

"""Now we plot the train and validation accuracy and loss using matplotlib"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
# Model accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'])
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'])
plt.show()

"""Now we get the classification report using sklearn library and get precicion final accuracy,recall,f1-score,support."""

import numpy as np
from sklearn.metrics import classification_report, accuracy_score
pred = np.round(model.predict(X_test)).astype(int)

print('Results for Binary Model')
print(accuracy_score(y_test,pred))
print(classification_report(y_test,pred))

model.save('model1.h5')

files.download("model1.h5")